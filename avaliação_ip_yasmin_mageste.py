# -*- coding: utf-8 -*-
"""Avaliação IP - Yasmin Mageste

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NiRVVL-YJebiwJ77z0ALnCR3J148TUdM
"""

# Questão 1

##a
pot = float(input('Qual a potência do aparelho? (em kW) '))
horas = float(input('Qual o tempo médio diário de uso do aparelho? (em horas) '))

##b
while pot <= 0:
  print('A potência deve ser maior que zero.')
  pot = float(input('Qual a potência do aparelho? (em kW) '))

while horas <= 0:
  print('O tempo médio deve ser maior que zero.')
  horas = float(input('Qual o tempo médio diário de uso do aparelho? (em horas) '))

##c
def calcular_consumo_mensal(pot, horas):
  consumo = pot * horas * 30
  return consumo

print(f'o consumo mensal estimado é de {calcular_consumo_mensal(pot, horas)} kWh')

# Questão 2
import pandas as pd
metas = {}
df1 = pd.DataFrame(metas)

## a
def adicionar_metas(x):
 df1[x] = [float(input(f'Qual a meta de {x}? (em reais) '))]

meta = input('deseja adicionar alguma meta para alguma categoria]? (s/n)')
while meta.lower() == 's':
  y = input('Qual o nome da meta? ')
  adicionar_metas(y)
  meta = input('deseja adicionar mais alguma meta? ')

print()
print(df1)
print()

##b
lancamentos = int(input('Quantos lançamentos finançeiros deseja registrar? '))

gastos = {}
df2 = pd.DataFrame(gastos)

##c
categorias = []
valores = []
total = 0
indice = 0
for i in range(lancamentos):
  descricao = input(f'Qual a descrição do lançamento {i+1}? ')
  valor = float(input(f'Qual o valor do lançamento {i+1}? '))
  valores.append(valor)
  total += valor
  categoria = input(f'Qual a categoria do lançamento {i+1}? ')
  categorias.append(categoria)

dados_lancamentos = {'Categoria': categorias, 'Valor': valores}


df2 = pd.DataFrame(dados_lancamentos)

print()
print(df2)

a ={}
t2 = pd.DataFrame(a)
tipos = []

for i in categorias:
  if i not in tipos:
    tipos.append(i)

for t in tipos:
  contador = 0
  for i in categorias:
    if i == t:
      contador += 1

  t2[t] = [contador, 0]

for i in range(lancamentos):
  for t in tipos:
    if categorias[i] == t:
      t2.loc[1, t] += valores[i]

##d
print()
print(f'o total gasto no mês foi de {total} reais')
for i in t2:
  print(f'o gasto total na categoria {i} foi de {t2[i][1]} reais')
  print(f'a média de gastos para a categoria {i} foi de {t2[i][1]/t2[i][0]}')

v = []
for i in t2.loc[1]:
  v.append(i)

n = 0
for i in range(len(v)):
  if v[i] == max(v):
    n = i
print(f'a categoria com maior gasto foi {tipos[n]}')
for i in t2:
  for x in df1:
    if x == i:
      razao = t2[i][1]/df1[x][0]
      print(f'o valor gasto na categoria {i}, foi de {razao*100}% em relação a meta')

# Questão 3
import pandas as pd
import numpy as np
import random

# gerando os dados de maneira aleatória
lista = []
for i in range(30):
  n = random.randint(10,30)
  lista.append(n)
print(lista)

##a
arr = np.array(lista)
media = np.mean(arr)
mediana = np.median(arr)
desvio_padrao = np.std(arr)
variancia = np.var(arr)

print()
print(f'a média das temperaturas desse mês foi de {media:.2f} graus')
print(f'a mediana das temperaturas desse mês foi de {mediana} graus')
print(f'o desvio padrão das temperaturas desse mês foi de {desvio_padrao:.2f} graus')
print(f'o índice de variação termica média desse mês foi de {variancia:.2f} graus')

##b
print()
data = {}
df = pd.DataFrame(data)
df['dia'] = range(1,31)
df['temperaturas'] = lista
diferenca = []
for i in lista:
  n = i - media
  diferenca.append(n)
df['diferença para a média'] = diferenca

## c
classificacao = []
for i in lista:
  if i < 18:
    classificacao.append('frio')
  elif 18<=i<=25:
    classificacao.append('agradável')
  else:
    classificacao.append('quente')
df['classificação'] = classificacao
print(df)


##d
###i
f = 0
a = 0
q = 0
for i in classificacao:
  if i =='frio':
    f+=1
  elif i == 'agradável':
    a+=1
  else:
    q+=1
print()
print(f'nesse mês houve {f} dias frios, {a} dias agradáveis e {q} dias quentes')
print()

###ii
maiores = sorted(lista, reverse = True)[:5]
menores = sorted(lista)[:5]

dias_mais_quentes = []
for i in maiores:
  for x in range(len(lista)):
    if i == lista[x] and x+1 not in dias_mais_quentes:
      dias_mais_quentes.append(x+1)

dias_mais_frios = []
for i in menores:
  for x in range(len(lista)):
    if i == lista[x] and x+1 not in dias_mais_frios:
      dias_mais_frios.append(x+1)

print('os dias mais quentes desse mês foram:')
for y in dias_mais_quentes:
  print(y)

print()
print('os dias mais frios desse mês foram')
for y in dias_mais_frios:
  print(y)

print()
###iii
frios_acima_da_media = 0
quentes_abaixo_da_media = 0
for dia in dias_mais_quentes:
  if df['diferença para a média'][dia-1] > 0:
    print(f'o dia {dia} foi acima da média mensal')
  elif df['diferença para a média'][dia-1] < 0:
    print(f'o dia {dia} foi abaixo da média mensal')
    quentes_abaixo_da_media +=1
  else:
    print(f'o dia {dia} ficou exatamente na média')

for dia in dias_mais_frios:
  if df['diferença para a média'][dia-1] > 0:
    print(f'o dia {dia} foi acima da média mensal')
    frios_acima_da_media +=1
  elif df['diferença para a média'][dia-1] < 0:
    print(f'o dia {dia} foi abaixo da média mensal')
  else:
    print(f'o dia {dia} ficou exatamente na média')

### iv
print()
if frios_acima_da_media > 0:
  print('nesse mês houve dias frios acima da média de temperatura')
else:
  print('nesse mês não houve dias frios acima da média de temperatura')

if quentes_abaixo_da_media > 0:
  print('nesse mês houve dias quentes abaixo da média de temperatura')
else:
  print('nesse mês não houve dias quentes abaixo da média de temperatura')

# Questão 4 - parte 1

import pandas as pd
import random

quadro = {'a': ['.', '.', '.', '.', '.', '.', '.', '.'],
          'b': ['.', '.', '.', '.', '.', '.', '.', '.'],
          'c': ['.', '.', '.', '.', '.', '.', '.', '.'],
          'd': ['.', '.', '.', '.', '.', '.', '.', '.'],
          'e': ['.', '.', '.', '.', '.', '.', '.', '.'],
          'f': ['.', '.', '.', '.', '.', '.', '.', '.'],
          'g': ['.', '.', '.', '.', '.', '.', '.', '.']}

normal = ['.', '.', '.', '.', '.', '.', '.']
completo = ['[]', '[]', '[]', '[]', '[]', '[]', '[]']
marcar = ['X', 'X', 'X', 'X', 'X', 'X', 'X']

conferir = [7, 6, 5, 4, 3, 2, 1, 0]

perdeu = False

pontos = 0

def finalizar(i):
  if i >= 2:
    df.loc[0, ['c', 'd']] = ['.', '.']
    df.loc[1, ['c', 'd']] = ['.', '.']
    print(df)
  else:
    print(df)

df = pd.DataFrame(quadro)
print(df)
p = random.randint(1,5)

def direcao():
  user = input('digite a letra para onde o canto esquerdo da peça deve ir: (ex: a) ')
  if user == 'a':
    x = 'a'
    y = 'b'
  elif user == 'b':
    x = 'b'
    y = 'c'
  elif user == 'c':
    x = 'c'
    y = 'd'
  elif user == 'd':
    x = 'd'
    y = 'e'
  elif user == 'e':
    x = 'e'
    y = 'f'
  elif user == 'f':
    x = 'f'
    y = 'g'
  else:
    print('digite uma letra válida')
    x, y = direcao()
  return x, y

def peca1():
  #quadrado
  if (df.loc[0, ['c', 'd']] == ['.', '.']).all() and (df.loc[1, ['c', 'd']] == ['.', '.']).all() :
    df.loc[0, ['c', 'd']] = ['[]', '[]']
    df.loc[1, ['c', 'd']] = ['[]', '[]']
    print(df)
    x, y = direcao()
    for i in conferir:
     if i > 0 and (df.loc[i-1, [x, y]] == ['.', '.']).all() and (df.loc[i, [x, y]] == ['.', '.']).all():
            df.loc[i-1, [x, y]] = ['[]', '[]']
            df.loc[i, [x, y]] = ['[]', '[]']
            print(i)
            finalizar(i)
            break
  else:
    print('você perdeu =(')
    return True



def peca2():
  #[]
  #[] []
  if (df.loc[0, ['c', 'd']] == ['.', '.']).all() and (df.loc[1, ['c', 'd']] == ['.', '.']).all() :
    df.loc[0, ['c', 'd']] = ['[]', '.']
    df.loc[1, ['c', 'd']] = ['[]', '[]']
    print(df)
    x, y = direcao()
    for i in conferir:
     if i > 0 and (df.loc[i-1, [x]] == ['.']).all() and (df.loc[i, [x, y]] == ['.', '.']).all():
            df.loc[i-1, [x]] = ['[]']
            df.loc[i, [x, y]] = ['[]', '[]']
            print(i)
            finalizar(i)
            break
  else:
    print('você perdeu =(')
    return True



def peca3():
  # .[]
  #[][]
  if (df.loc[0, ['c', 'd']] == ['.', '.']).all() and (df.loc[1, ['c', 'd']] == ['.', '.']).all() :
    df.loc[0, ['c', 'd']] = ['.', '[]']
    df.loc[1, ['c', 'd']] = ['[]', '[]']
    print(df)
    x, y = direcao()
    for i in conferir:
     if i > 0 and (df.loc[i-1, [y]] == ['.']).all() and (df.loc[i, [x, y]] == ['.', '.']).all():
            df.loc[i-1, [y]] = ['[]']
            df.loc[i, [x, y]] = ['[]', '[]']
            print(i)
            finalizar(i)
            break
  else:
    print('você perdeu =(')
    return True


def peca4():
  #[][]
  #[]
  if (df.loc[0, ['c', 'd']] == ['.', '.']).all() and (df.loc[1, ['c', 'd']] == ['.', '.']).all() :
    df.loc[0, ['c', 'd']] = ['[]', '[]']
    df.loc[1, ['c', 'd']] = ['[]', '.']
    print(df)
    x, y = direcao()
    for i in conferir:
     if i > 0 and (df.loc[i-1, [x, y]] == ['.', '.']).all() and (df.loc[i, [x]] == ['.']).all():
            df.loc[i-1, [x, y]] = ['[]', '[]']
            df.loc[i, [x]] = ['[]']
            print(i)
            finalizar(i)
            break
  else:
    print('você perdeu =(')
    return True


def peca5():
  #[][]
  #. []
  if (df.loc[0, ['c', 'd']] == ['.', '.']).all() and (df.loc[1, ['c', 'd']] == ['.', '.']).all() :
    df.loc[0, ['c', 'd']] = ['[]', '[]']
    df.loc[1, ['c', 'd']] = ['.', '[]']
    print(df)
    x, y = direcao()
    for i in conferir:
     if i > 0 and (df.loc[i-1, [x, y]] == ['.', '.']).all() and (df.loc[i, [y]] == ['.']).all():
            df.loc[i-1, [x, y]] = ['[]', '[]']
            df.loc[i, [y]] = ['[]']
            print(i)
            finalizar(i)
            break

  else:
    print('você perdeu =(')
    return True

# Questão 4 - parte 2

# OBS: por favor rodar a parte 1 primeiro para reiniciar o quadro

while pontos < 5 or perdeu == False:
  p = random.randint(1,5)
  if p == 1:
    perdeu = peca1()
  elif p == 2:
    perdeu = peca2()
  elif p == 3:
    perdeu = peca3()
  elif p == 4:
    perdeu = peca4()
  elif p == 5:
    perdeu = peca5()
  if perdeu == True:
    break
  for i in conferir:
    if (df.loc[i]  == completo).all():
      pontos += 1
      df.loc[i] = marcar
      print('Você marcou um ponto =)')
      print(df)
      df.loc[i] = normal
      df.loc[0] = normal
      for k in range(i, 0, -1):
        df.loc[k] = df.loc[k-1]

if pontos == 5:
  print('Você venceu')

# Questão 6

import requests
import json
import matplotlib.pyplot as plt

##1

def buscar_cidade():
  try:
    city = input('digite o nome da cidade (no Brasil): ')
    api_key = "e0b01da9367d25fb28b8c2fd3518b544"
    url = f"http://api.openweathermap.org/geo/1.0/direct?q={city},076&limit=1&appid={api_key}"
    response = requests.get(url)
    lat = response.json()[0]["lat"]
    lon = response.json()[0]["lon"]
    return lat, lon
  except:
    print('digite uma cidade válida')
    return buscar_cidade()


lat, lon = buscar_cidade()
api_key = "e0b01da9367d25fb28b8c2fd3518b544"


url2 = f'https://api.openweathermap.org/data/2.5/forecast?lat={lat}&lon={lon}&appid={api_key}&units=metric&lang=pt_br'
response2 = requests.get(url2)

temp1 = response2.json()["list"][0]["main"]["temp"]
temp2 = response2.json()["list"][1]["main"]["temp"]
temp3 = response2.json()["list"][2]["main"]["temp"]
temp4 = response2.json()["list"][3]["main"]["temp"]
temp5 = response2.json()["list"][4]["main"]["temp"]

temperaturas = [temp1, temp2, temp3, temp4, temp5]


##2

plt.plot([0, 3, 6, 9, 12], temperaturas, marker='o', linestyle='-', color='b')  # 'o' é o marcador de círculo, '-' linha sólida, 'b' cor azul
plt.title('Temperatura nas próximas horas')
plt.xlabel('Próximas horas')
plt.ylabel('Temperatura (°C)')
plt.grid(True)
plt.show()